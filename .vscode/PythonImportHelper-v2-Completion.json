[
    {
        "label": "queries",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "queries",
        "description": "queries",
        "detail": "queries",
        "documentation": {}
    },
    {
        "label": "SyncCore",
        "importPath": "queries",
        "description": "queries",
        "isExtraImport": true,
        "detail": "queries",
        "documentation": {}
    },
    {
        "label": "AsyncCore",
        "importPath": "queries",
        "description": "queries",
        "isExtraImport": true,
        "detail": "queries",
        "documentation": {}
    },
    {
        "label": "SyncORM",
        "importPath": "queries",
        "description": "queries",
        "isExtraImport": true,
        "detail": "queries",
        "documentation": {}
    },
    {
        "label": "AsyncORM",
        "importPath": "queries",
        "description": "queries",
        "isExtraImport": true,
        "detail": "queries",
        "documentation": {}
    },
    {
        "label": "MetaData",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "MetaData",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "workers_table",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ResumesOrm",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "WorkersOrm",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "WorkersOrm",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Workload",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "workers_table",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "metadata",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ResumesOrm",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "engine_sync",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine_async",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "sync_session_factory",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "sync_session_factory",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine_sync",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "async_session_factory",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "str256",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "aliased",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declared_attr",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "SyncCore",
        "kind": 6,
        "importPath": "queries.core",
        "description": "queries.core",
        "peekOfCode": "class SyncCore:\n    @staticmethod\n    def create_tables(metadata):\n        metadata.drop_all(engine_sync)\n        metadata.create_all(engine_sync)\n    @staticmethod\n    def insert_data(workers_table):\n        with engine_sync.connect() as conn:\n            # stmt - insert / update/ delete\n            # сырой запрос:",
        "detail": "queries.core",
        "documentation": {}
    },
    {
        "label": "AsyncCore",
        "kind": 6,
        "importPath": "queries.core",
        "description": "queries.core",
        "peekOfCode": "class AsyncCore:\n    @staticmethod\n    async def create_tables(metadata: MetaData):\n        async with engine_async.begin() as conn:\n            await conn.run_sync(metadata.drop_all)\n            await conn.run_sync(metadata.create_all)\n    @staticmethod\n    async def insert_workers(workers_table):\n        async with engine_async.connect() as conn:\n            stmt = insert(workers_table).values(",
        "detail": "queries.core",
        "documentation": {}
    },
    {
        "label": "get_123_sync",
        "kind": 2,
        "importPath": "queries.core",
        "description": "queries.core",
        "peekOfCode": "def get_123_sync():\n    with engine_sync.connect() as conn:  # engine.begin() - делает комит в конце всегда при выходе из контекстного менеджера,\n        # engine.connect() делает rollback при выходе из контекстного менеджера\n        result = conn.execute(text(\"SELECT 1,2,3 union select 4,5,6\"))\n        # чтобы извлечь ответ из итератора алхимии мы должны как то по нему пройтись\n        print(f\"VERSION: {result.first()}\")  # VERSION: (1, 2, 3)\n        # при попытке извлечь один элемент из таблицы мы получаем кортеж\n        conn.commit()\n# Асинхронный вариант\nasync def get_123_async():",
        "detail": "queries.core",
        "documentation": {}
    },
    {
        "label": "SyncORM",
        "kind": 6,
        "importPath": "queries.orm",
        "description": "queries.orm",
        "peekOfCode": "class SyncORM:\n    @staticmethod\n    def create_tables(Base, engine_sync):\n        # engine_sync.echo = False\n        Base.metadata.drop_all(engine_sync)\n        Base.metadata.create_all(engine_sync)\n    # insert (добавление) через орм.\n    @staticmethod\n    def insert_workers(\n        session_factory,",
        "detail": "queries.orm",
        "documentation": {}
    },
    {
        "label": "AsyncORM",
        "kind": 6,
        "importPath": "queries.orm",
        "description": "queries.orm",
        "peekOfCode": "class AsyncORM:\n    @staticmethod\n    async def async_insert_data(WorkersOrm, async_session_factory):\n        async with async_session_factory() as session:\n            worker = WorkersOrm(username=\"New Worker from orm\")\n            session.add(worker)\n            # resume = ResumesOrm(\n            #     title=\"New resume\",\n            #     compensation=23,\n            #     workload=\"parttime\",",
        "detail": "queries.orm",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Settings(BaseSettings):\n    DB_NAME: str\n    DB_PORT: int\n    DB_PASS: str\n    DB_USER: str\n    DB_HOST: str\n    @property\n    def database_url_asyncpg(self):\n        return f\"postgresql+asyncpg://{self.DB_USER}:{self.DB_PASS}@{self.DB_HOST}:{self.DB_PORT}/{self.DB_NAME}\"\n    @property",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "settings = Settings()",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "class Base(DeclarativeBase):\n    type_annotation_map = {\n        str256: String(256),\n    }\n# ENGINE нужен чтобы коннектится к нашей бд и делать какие то запросы\nengine_sync = create_engine(\n    url=settings.database_url_psycopg,\n    echo=False,\n    pool_size=5,  # Максимум будет создано подключений при работае с алхимией\n    max_overflow=10,  # максимум 10 доп подключений алхимия может еще создать если все 5 максимум подключений заполнено",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "str256",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "str256 = Annotated[str, 256]\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        str256: String(256),\n    }\n# ENGINE нужен чтобы коннектится к нашей бд и делать какие то запросы\nengine_sync = create_engine(\n    url=settings.database_url_psycopg,\n    echo=False,\n    pool_size=5,  # Максимум будет создано подключений при работае с алхимией",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine_sync",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "engine_sync = create_engine(\n    url=settings.database_url_psycopg,\n    echo=False,\n    pool_size=5,  # Максимум будет создано подключений при работае с алхимией\n    max_overflow=10,  # максимум 10 доп подключений алхимия может еще создать если все 5 максимум подключений заполнено\n)\nengine_async = create_async_engine(\n    url=settings.database_url_asyncpg,\n    echo=True,\n    pool_size=5,  # Максимум будет создано подключений при работае с алхимией",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine_async",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "engine_async = create_async_engine(\n    url=settings.database_url_asyncpg,\n    echo=True,\n    pool_size=5,  # Максимум будет создано подключений при работае с алхимией\n    max_overflow=10,  # максимум 10 доп подключений алхимия может еще создать если все 5 максимум подключений заполнено\n)\n# запросы в бд всегда делаются через контекстный менеджер\n# SESSION:\n# Session - сессия нужна для транзакций в бд.\n# Когда мы входим в сессию мы открываем транзакцию, делаем набор каких то действий и закрываем транзакцию вызывая коммит.",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "sync_session_factory",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "sync_session_factory = sessionmaker(engine_sync)\nasync_session_factory = async_sessionmaker(engine_async)",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "async_session_factory",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "async_session_factory = async_sessionmaker(engine_async)",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "resumes",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "resumes = [\n    {\n        \"title\": \"Python Developer\",\n        \"workload\": Workload.parttime,\n        \"compensation\": 100000,\n        \"worker_id\": 1,\n    },\n    {\n        \"title\": \"Java Script Developer\",\n        \"workload\": Workload.fulltime,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Workload",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Workload(Enum):\n    parttime = \"parttime\"\n    fulltime = \"fulltime\"\n# ДЕКЛАРАТИВНЫЙ ПОДХОД\n# DeclarativeBase - главный класс который будет управляет нашими таблицами. Содержит метадату\nclass WorkersOrm(Base):\n    __tablename__ = \"workers\"\n    id: Mapped[intpk]\n    username: Mapped[str]\nclass ResumesOrm(Base):",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "WorkersOrm",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class WorkersOrm(Base):\n    __tablename__ = \"workers\"\n    id: Mapped[intpk]\n    username: Mapped[str]\nclass ResumesOrm(Base):\n    __tablename__ = \"resumes\"\n    id: Mapped[intpk]\n    title: Mapped[str256]\n    compensation: Mapped[int | None]\n    workload: Mapped[Workload]",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ResumesOrm",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class ResumesOrm(Base):\n    __tablename__ = \"resumes\"\n    id: Mapped[intpk]\n    title: Mapped[str256]\n    compensation: Mapped[int | None]\n    workload: Mapped[Workload]\n    worker_id: Mapped[int] = mapped_column(ForeignKey(\"workers.id\", ondelete=\"CASCADE\"))\n    created_at: Mapped[created_at]\n    updated_at: Mapped[updated_at]",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "metadata",
        "kind": 5,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "metadata = MetaData()\nworkers_table = Table(\n    \"workers\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"username\", String),\n)\nintpk = Annotated[int, mapped_column(primary_key=True)]\ncreated_at = Annotated[\n    datetime,",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "workers_table",
        "kind": 5,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "workers_table = Table(\n    \"workers\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"username\", String),\n)\nintpk = Annotated[int, mapped_column(primary_key=True)]\ncreated_at = Annotated[\n    datetime,\n    mapped_column(",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "intpk",
        "kind": 5,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "intpk = Annotated[int, mapped_column(primary_key=True)]\ncreated_at = Annotated[\n    datetime,\n    mapped_column(\n        server_default=text(\"TIMEZONE('utc', now())\"),\n        default=datetime.utcnow,\n    ),\n]\nupdated_at = Annotated[\n    datetime,",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "created_at",
        "kind": 5,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "created_at = Annotated[\n    datetime,\n    mapped_column(\n        server_default=text(\"TIMEZONE('utc', now())\"),\n        default=datetime.utcnow,\n    ),\n]\nupdated_at = Annotated[\n    datetime,\n    mapped_column(",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "updated_at",
        "kind": 5,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "updated_at = Annotated[\n    datetime,\n    mapped_column(\n        server_default=text(\"TIMEZONE('utc', now())\"),\n        default=datetime.utcnow,\n        onupdate=datetime.utcnow,\n    ),\n]\nclass Workload(Enum):\n    parttime = \"parttime\"",
        "detail": "models",
        "documentation": {}
    }
]